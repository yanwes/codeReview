name: Code Review with Flow

on:
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  review-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Check out the code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          export PATH="$HOME/.local/bin:$PATH"

      - name: Configure Poetry Cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install Dependencies
        run: |
          poetry install --no-root
          poetry add requests PyGithub gitpython

      - name: Run Code Review with Flow
        if: github.event_name == 'pull_request'
        env:
          FLOW_CLIENT_ID: ${{ secrets.FLOW_CLIENT_ID }}
          FLOW_CLIENT_SECRET: ${{ secrets.FLOW_CLIENT_SECRET }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO_NAME: ${{ github.repository }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          poetry run python <<EOF
          import os
          import requests
          from github import Github
          from git import Repo
          
          # Configuração do Flow API
          flow_client_id = os.environ['FLOW_CLIENT_ID']
          flow_client_secret = os.environ['FLOW_CLIENT_SECRET']
          
          # Autenticação no Flow
          auth_url = "https://api.flowai.com/oauth/token"  # Verifique a URL correta
          auth_data = {
              "grant_type": "client_credentials",
              "client_id": flow_client_id,
              "client_secret": flow_client_secret
          }
          auth_response = requests.post(auth_url, data=auth_data)
          if auth_response.status_code == 200:
              access_token = auth_response.json()['access_token']
          else:
              raise Exception(f"Falha na autenticação com o Flow: {auth_response.text}")
          
          flow_headers = {
              "Authorization": f"Bearer {access_token}",
              "Content-Type": "application/json"
          }
          
          # Configuração do GitHub
          github_token = os.environ['GITHUB_TOKEN']
          repo_name = os.environ['REPO_NAME']
          pr_number = int(os.environ['PR_NUMBER'])
          
          g = Github(github_token)
          repo = g.get_repo(repo_name)
          pr = repo.get_pull(pr_number)
          
          # Obter alterações do PR
          changes = pr.get_files()
          
          # Preparar prompt para o Flow
          prompt = "Analise as seguintes alterações de código e forneça feedback:\n\n"
          for file in changes:
              prompt += f"Arquivo: {file.filename}\n"
              prompt += f"Alterações:\n{file.patch}\n\n"
          
          # Chamar Flow API
          flow_url = "https://api.flowai.com/v1/chat"  # Verifique a URL correta
          flow_payload = {
              "model": "claude-2",  # Ajuste conforme necessário
              "messages": [{"role": "user", "content": prompt}]
          }
          
          response = requests.post(flow_url, json=flow_payload, headers=flow_headers)
          
          if response.status_code == 200:
              review_result = response.json()['choices'][0]['message']['content']
              # Postar o resultado como um comentário no PR
              pr.create_issue_comment(f"Análise do Flow:\n\n{review_result}")
          else:
              error_message = f"Erro na API do Flow: {response.status_code}\n{response.text}"
              print(error_message)
              pr.create_issue_comment(f"Erro ao executar a revisão de código:\n\n{error_message}")
          EOF

      - name: Notify on Failure
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '⚠️ Pipeline falhou! Por favor, verifique os logs para mais detalhes.'
            })